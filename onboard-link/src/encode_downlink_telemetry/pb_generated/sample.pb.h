/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_SAMPLE_SAMPLE_PB_H_INCLUDED
#define PB_SAMPLE_SAMPLE_PB_H_INCLUDED
#include <pb.h>
#include "segments.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _sample_Primitive {
    pb_size_t which_value;
    union {
        int32_t int_val;
        int64_t long_val;
        float float_val;
        double double_val;
        bool bool_val;
        pb_callback_t string_val;
    } value;
} sample_Primitive;

typedef struct _sample_Sample {
    pb_callback_t metric_id;
    pb_callback_t sample_id;
    float timestamp; /* s since last epoch */
    pb_size_t which_data;
    union {
        segments_SegmentsFrame segments_frame;
        sample_Primitive primitive_value;
    } data;
} sample_Sample;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define sample_Primitive_init_default            {0, {0}}
#define sample_Sample_init_default               {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, {segments_SegmentsFrame_init_default}}
#define sample_Primitive_init_zero               {0, {0}}
#define sample_Sample_init_zero                  {{{NULL}, NULL}, {{NULL}, NULL}, 0, 0, {segments_SegmentsFrame_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define sample_Primitive_int_val_tag             1
#define sample_Primitive_long_val_tag            2
#define sample_Primitive_float_val_tag           3
#define sample_Primitive_double_val_tag          4
#define sample_Primitive_bool_val_tag            5
#define sample_Primitive_string_val_tag          6
#define sample_Sample_metric_id_tag              7
#define sample_Sample_sample_id_tag              8
#define sample_Sample_timestamp_tag              9
#define sample_Sample_segments_frame_tag         10
#define sample_Sample_primitive_value_tag        11

/* Struct field encoding specification for nanopb */
#define sample_Primitive_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    INT32,    (value,int_val,value.int_val),   1) \
X(a, STATIC,   ONEOF,    INT64,    (value,long_val,value.long_val),   2) \
X(a, STATIC,   ONEOF,    FLOAT,    (value,float_val,value.float_val),   3) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,double_val,value.double_val),   4) \
X(a, STATIC,   ONEOF,    BOOL,     (value,bool_val,value.bool_val),   5) \
X(a, CALLBACK, ONEOF,    STRING,   (value,string_val,value.string_val),   6)
#define sample_Primitive_CALLBACK pb_default_field_callback
#define sample_Primitive_DEFAULT NULL

#define sample_Sample_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   metric_id,         7) \
X(a, CALLBACK, SINGULAR, STRING,   sample_id,         8) \
X(a, STATIC,   SINGULAR, FLOAT,    timestamp,         9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,segments_frame,data.segments_frame),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,primitive_value,data.primitive_value),  11)
#define sample_Sample_CALLBACK pb_default_field_callback
#define sample_Sample_DEFAULT NULL
#define sample_Sample_data_segments_frame_MSGTYPE segments_SegmentsFrame
#define sample_Sample_data_primitive_value_MSGTYPE sample_Primitive

extern const pb_msgdesc_t sample_Primitive_msg;
extern const pb_msgdesc_t sample_Sample_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define sample_Primitive_fields &sample_Primitive_msg
#define sample_Sample_fields &sample_Sample_msg

/* Maximum encoded size of messages (where known) */
/* sample_Primitive_size depends on runtime parameters */
/* sample_Sample_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
