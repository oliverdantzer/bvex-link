/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_SAMPLE_PB_H_INCLUDED
#define PB_SAMPLE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Segment {
    uint32_t sequence_num;
    uint32_t num_segments;
    pb_callback_t data;
} Segment;

typedef struct _SampleFrame {
    char metric_id[17];
    uint32_t sample_id;
    float timestamp; /* s since last epoch */
    char data_type[17]; /* "filedata" or "primitive" */
    bool has_extension;
    char extension[17];
    bool has_segment;
    Segment segment;
} SampleFrame;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SampleFrame_init_default                 {"", 0, 0, "", false, "", false, Segment_init_default}
#define Segment_init_default                     {0, 0, {{NULL}, NULL}}
#define SampleFrame_init_zero                    {"", 0, 0, "", false, "", false, Segment_init_zero}
#define Segment_init_zero                        {0, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Segment_sequence_num_tag                 1
#define Segment_num_segments_tag                 2
#define Segment_data_tag                         4
#define SampleFrame_metric_id_tag                7
#define SampleFrame_sample_id_tag                8
#define SampleFrame_timestamp_tag                9
#define SampleFrame_data_type_tag                12
#define SampleFrame_extension_tag                13
#define SampleFrame_segment_tag                  14

/* Struct field encoding specification for nanopb */
#define SampleFrame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   metric_id,         7) \
X(a, STATIC,   SINGULAR, UINT32,   sample_id,         8) \
X(a, STATIC,   SINGULAR, FLOAT,    timestamp,         9) \
X(a, STATIC,   SINGULAR, STRING,   data_type,        12) \
X(a, STATIC,   OPTIONAL, STRING,   extension,        13) \
X(a, STATIC,   OPTIONAL, MESSAGE,  segment,          14)
#define SampleFrame_CALLBACK NULL
#define SampleFrame_DEFAULT NULL
#define SampleFrame_segment_MSGTYPE Segment

#define Segment_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   sequence_num,      1) \
X(a, STATIC,   SINGULAR, UINT32,   num_segments,      2) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              4)
#define Segment_CALLBACK pb_default_field_callback
#define Segment_DEFAULT NULL

extern const pb_msgdesc_t SampleFrame_msg;
extern const pb_msgdesc_t Segment_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SampleFrame_fields &SampleFrame_msg
#define Segment_fields &Segment_msg

/* Maximum encoded size of messages (where known) */
/* SampleFrame_size depends on runtime parameters */
/* Segment_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
